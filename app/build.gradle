buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.4.2'
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.getkeepsafe.dexcount'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LGPL-3.0.txt'
        exclude 'OSGI-INF/blueprint/blueprint.xml'
        exclude 'OSGI-INF/metatype/metatype.xml'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId globalConfiguration.getAt("androidApplicationId")
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
        testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            versionNameSuffix " Debug"
            debuggable true
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    sourceSets {
        def commonTestDir = 'src/commonTest/java'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    def mobileDependencies = rootProject.ext.mobileDependencies
    compile project(':viewpagerindicator')

    // Android
    compile mobileDependencies.appcompat
    compile mobileDependencies.support
    compile mobileDependencies.design
    compile mobileDependencies.cardview
    compile mobileDependencies.recyclerView

    // RxJava
    compile mobileDependencies.rxjava
    compile mobileDependencies.rxandroid
    compile mobileDependencies.rxbinding
    compile mobileDependencies.rxbinding_recyclerview
    compile mobileDependencies.rxbinding_support

    // butterknife
    compile mobileDependencies.butterKnife

    // overscroll
    compile mobileDependencies.overscroll

    // otto
    compile mobileDependencies.otto

    // logs
    compile mobileDependencies.timber
    compile mobileDependencies.timbertreeutils
    compile(mobileDependencies.crashlytics) {
        transitive = true;
    }

    // image downloading
    compile mobileDependencies.picasso
    compile mobileDependencies.okhttp

    // icepick
    compile mobileDependencies.icepick
    provided mobileDependencies.icepickProcessor

    // sqlite
    compile mobileDependencies.sqliteAssetHelper
    compile mobileDependencies.sqlbrite

    // dagger
    compile mobileDependencies.dagger
    apt mobileDependencies.daggerCompiler
    testApt mobileDependencies.daggerCompiler
    androidTestApt mobileDependencies.daggerCompiler
    provided mobileDependencies.javaxAnnotation

    // unit
    testCompile mobileDependencies.junit
    testCompile mobileDependencies.mockito
    testCompile mobileDependencies.robolectric
    testCompile mobileDependencies.robolectric_shadows
    testCompile mobileDependencies.assertj
    testCompile(mobileDependencies.assertj_android) {
        exclude group: "com.android.support", module: "support-annotations"
        exclude group: "com.android.support", module: "support-v4"
    }
    testCompile(mobileDependencies.assertj_android_recycler) {
        exclude group: "com.android.support", module: "support-annotations"
        exclude group: "com.android.support", module: "support-v4"
    }

    // integration
    androidTestCompile mobileDependencies.mockito
    androidTestCompile mobileDependencies.dexmaker
    androidTestCompile mobileDependencies.dexmaker_mockito
    androidTestCompile(mobileDependencies.testrules) {
        exclude module: 'support-annotations'
    }
    androidTestCompile(mobileDependencies.espresso) {
        exclude module: 'support-annotations'
    }
    androidTestCompile(mobileDependencies.espressointents) {
        exclude module: 'support-annotations'
    }
    androidTestCompile(mobileDependencies.testrunner) {
        exclude module: 'support-annotations'
    }
}

// Log out test results to console
tasks.matching {it instanceof Test}.all {
    testLogging.events = ["failed", "passed", "skipped"]
}
