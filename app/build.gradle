buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.6.2'
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.getkeepsafe.dexcount'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def keystoreStorePass = "default"
def keystoreKeyAlias = "default"
def keystoreKeyPass = "default"
def gCloudApiKey = "default"

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LGPL-3.0.txt'
        exclude 'OSGI-INF/blueprint/blueprint.xml'
        exclude 'OSGI-INF/metatype/metatype.xml'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId globalConfiguration.getAt("androidApplicationId")
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
        testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests {
            includeAndroidResources = true
        }
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }

    File signFile = rootProject.file('buildsystem/sign.properties')
    if (signFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(signFile))

        keystoreStorePass = p.storePassword
        keystoreKeyAlias = p.keyAlias
        keystoreKeyPass = p.keyPassword
    } else {
        keystoreStorePass = System.getenv('KEYSTORE_STORE_PASS')
        keystoreKeyAlias = System.getenv('KEYSTORE_KEY_ALIAS')
        keystoreKeyPass = System.getenv('KEYSTORE_KAY_PASS')
    }

    File apiKeysFile = rootProject.file('buildsystem/keys.properties')
    if (apiKeysFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(apiKeysFile))

        gCloudApiKey = p.googleCloud_ApiKey
    }

    signingConfigs {
        release {
            storeFile file("keystore/ipebk.jks")
            storePassword keystoreStorePass
            keyAlias keystoreKeyAlias
            keyPassword keystoreKeyPass
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField 'String', "GCApiKey", gCloudApiKey
        }

        debug {
            versionNameSuffix " Debug"
            debuggable true
            buildConfigField 'String', "GCApiKey", gCloudApiKey
        }
    }

    lintOptions {
        // todo: fix lint errors
        abortOnError false
    }

    sourceSets {
        def commonTestDir = 'src/commonTest/java'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    def mobileDependencies = rootProject.ext.mobileDependencies

    // auto-value
    annotationProcessor mobileDependencies.autoValueGson
    implementation mobileDependencies.autoValueGson

    // Android
    api mobileDependencies.appcompat
    api mobileDependencies.support
    api mobileDependencies.design
    api mobileDependencies.cardview
    api mobileDependencies.recyclerView
    api mobileDependencies.customtabs

    // RxJava
    api mobileDependencies.rxjava
    api mobileDependencies.rxandroid
    api mobileDependencies.rxbinding
    api mobileDependencies.rxbinding_recyclerview
    api mobileDependencies.rxbinding_support

    // butterknife
    implementation mobileDependencies.butterknife
    annotationProcessor mobileDependencies.butterknife_compiler

    // overscroll
    api mobileDependencies.overscroll
    api(mobileDependencies.aboutLibraries) {
        transitive = true
        exclude group: "com.android.support", module: "appcompat-v7"
        exclude group: "com.android.support", module: "cardview-v7"
        exclude group: "com.android.support", module: "recyclerview-v7"
        exclude group: "com.squareup.okio", module: "okio"
    }

    // logs
    api mobileDependencies.pine
    api mobileDependencies.timbertreeutils
    api(mobileDependencies.crashlytics) {
        transitive = true;
    }

    // image downloading
    api mobileDependencies.picasso
    api mobileDependencies.rxNetwork

    // icepick
    implementation mobileDependencies.icepick
    annotationProcessor mobileDependencies.icepickProcessor

    // sqlite
    api mobileDependencies.sqliteAssetHelper
    api mobileDependencies.sqlbrite

    // dagger
    implementation mobileDependencies.dagger
    annotationProcessor mobileDependencies.daggerCompiler
    testAnnotationProcessor mobileDependencies.daggerCompiler
    androidTestAnnotationProcessor mobileDependencies.daggerCompiler
    annotationProcessor mobileDependencies.javaxAnnotation

    // unit
    testImplementation mobileDependencies.junit
    testImplementation mobileDependencies.mockitoTwo
    testImplementation mobileDependencies.robolectric
    testImplementation mobileDependencies.robolectric_shadows
    testImplementation mobileDependencies.assertj
    testImplementation(mobileDependencies.assertj_android) {
        exclude group: "com.android.support", module: "support-annotations"
        exclude group: "com.android.support", module: "support-v4"
    }
    testImplementation(mobileDependencies.assertj_android_recycler) {
        exclude group: "com.android.support", module: "support-annotations"
        exclude group: "com.android.support", module: "support-v4"
    }

    // integration
    androidTestImplementation mobileDependencies.mockitoOne
    androidTestImplementation mobileDependencies.dexmaker
    androidTestImplementation mobileDependencies.dexmaker_mockito
    androidTestImplementation(mobileDependencies.testrules) {
        exclude module: 'support-annotations'
    }
    androidTestImplementation(mobileDependencies.espresso) {
        exclude module: 'support-annotations'
    }
    androidTestImplementation(mobileDependencies.espressointents) {
        exclude module: 'support-annotations'
    }
    androidTestImplementation(mobileDependencies.testrunner) {
        exclude module: 'support-annotations'
    }
}

// Log out test results to console
tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}
